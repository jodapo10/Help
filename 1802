import pygame
import random
import math

pygame.init()

# Classes
class Dot(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = 5
    
    def render(self):
        pygame.draw.circle(window, white, (self.x, self.y), self.radius, 0)

class Player(object):
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.radius = 20

    def update(self, key):
        old_x = self.x
        old_y = self.y
        dy = 0
        dx = 0
        
        # Player Movement
        if key[pygame.K_w]:
            dy -= 1
        if key[pygame.K_a]:
            dx -= 1
        if key[pygame.K_s]:
            dy += 1
        if key[pygame.K_d]:
            dx += 1

        # Collision
        self.x += dx
        self.y += dy
        if self.radius >= self.x or  self.x <= 800 + self.radius:
            self.x = old_x
        if self.radius >= self.y or  self.y <= 600 + self.radius:
            self.y = old_y

    def render(self):
        pygame.draw.circle(window, yellow, (self.x, self.y), self.radius, 0)

# FUNCTIONS
def create_dot(e_list):
    x = random.randint(5, 795)
    y = random.randint(5, 595)
    e_list.append(Dot(x, y))

# VARIABLES
Running = True
clock = pygame.time.Clock()

# Window Variables
window_size = [800, 600]
window = pygame.display.set_mode(window_size)

# Color Variables
white = (255, 255, 255)
black = (0, 0, 0)
yellow = (255, 255, 0)

# Entities
entity_list = []
player = Player(400, 300)
entity_list.append(player)
for dot in range(25):
    create_dot(entity_list)

# GAME LOOP
while Running:
    # UPDATE
    clock.tick(60)
    event = pygame.event.poll()
    keys = pygame.key.get_pressed()

    # Entities
    player.update(keys)

    # INPUT
    # Quit
    if event.type == pygame.QUIT:
        Running = False
    if keys[pygame.K_ESCAPE]:
        Running = False

    # RENDER
    window.fill(black)

    # Entities
    for entity in entity_list:
        entity.render()

    pygame.display.flip()
    
pygame.quit

    

